name: "Publish docker image"
description: "Build and push artifacts to the Docker registry"
inputs:
  registry-username:
    description: "Username for image registry"
    required: true
  registry-access-token:
    description: "Access token for image registry"
    required: true
  docker-registry:
    description: "Docker registry"
    required: false
    default: "ghcr.io"
  context-path:
    description: "Build's context path"
    required: false
    default: "."
  dockerfile-path:
    description: "Path to the Dockerfile"
    required: false
    default: "./Dockerfile"
  push:
    # Default depends on event context, see _Configure_ step.
    description: "Push build image to the specified image registry?"
    required: false
  platforms:
    # Default depends on event context, see _Configure_ step.
    description: "List of target platforms for build"
    required: false
  use-env-buildargs:
    description: "Source docker build args from .env file?"
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - name: 🎲 Configure action
      id: config
      shell: bash
      run: >
        if [[ -n "${{ inputs.push }}" ]] ; then {
          echo "::set-output name=push::${{ inputs.push }}"
        } else {
          if [[ "${{ github.event_name }}" == "push" ]] ; then {
            echo "[INFO] (push = 'true') This is a push event, assuming image needs publishing."
            echo "::set-output name=push::true"
          } else {
            echo "[INFO] (push = 'false') This is PR event, image probably needs just to be built."
            echo "::set-output name=push::false"
          } fi
        } fi

        if [[ -n "${{ inputs.platforms }}" ]] ; then {
          echo "::set-output name=platforms::${{ inputs.platforms }}"
        } else {
          if [[ "${{ github.event_name }}" == "push" ]] ; then {
            echo "[INFO] (platforms = 'linux/amd64,linux/arm64') This is a push event, assuming multiplatform image."
            echo "::set-output name=platforms::linux/amd64,linux/arm64"
          } else {
            echo "[INFO] (platforms = 'linux/amd64') This is a PR event, just build an image under native platform."
            echo "::set-output name=platforms::linux/amd64"
          } fi
        } fi

        if ( git status -s ) ; then {
          echo "[INFO] (checkout = 'false') Working copy exists, no need to checkout."
          echo "::set-output name=checkout::false"
        } else {
          echo "[INFO] (checkout = 'true') No working copy seems to exist in '${{ github.workspace }}',"\
            "need to checkout."
          echo "::set-output name=checkout::true"
        } fi

    - name: 🖨 Checkout code
      if: ${{ steps.config.outputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: 💉 Set up buildargs
      if: ${{ inputs.use-env-buildargs == 'true' }}
      id: buildargs
      shell: bash
      # https://github.com/actions/toolkit/blob/dd04665/docs/commands.md#set-an-environment-variable
      run: >
        if [[ -f ".env" ]] ; then {
          echo 'BUILDARGS<<EOF' >> $GITHUB_ENV ;
          grep -v '^#' .env >> $GITHUB_ENV ;
          echo 'EOF' >> $GITHUB_ENV
        } else {
          echo "[NOTICE] No '.env' file to source buildargs from!"
        } fi

    - name: 🏗 Set up QEMU
      if: ${{ steps.config.outputs.platforms != 'linux/amd64' }}
      uses: docker/setup-qemu-action@v3

    - name: 🏗 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔓 Log in to the Container registry
      if: ${{ steps.config.outputs.push == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.docker-registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-access-token }}

    - name: ℹ️ Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.docker-registry }}/${{ github.repository }}
        tags: |
          type=sha,enable=${{ !startsWith(github.ref_name, 'epic') }}
          type=raw,value=sha-{{ sha }}-{{ branch }},enable=${{ startsWith(github.ref_name, 'epic') }}

    - name: 🚀 Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.context-path }}
        file: ${{ inputs.dockerfile-path }}
        platforms: ${{ steps.config.outputs.platforms }}
        push: ${{ steps.config.outputs.push == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ${{ env.BUILDARGS }}
